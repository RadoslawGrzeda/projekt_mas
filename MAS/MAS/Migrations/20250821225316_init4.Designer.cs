// <auto-generated />
using System;
using MAS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MAS.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250821225316_init4")]
    partial class init4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarPerson", b =>
                {
                    b.Property<int>("preparationsid")
                        .HasColumnType("integer");

                    b.Property<int>("preparedpersonId")
                        .HasColumnType("integer");

                    b.HasKey("preparationsid", "preparedpersonId");

                    b.HasIndex("preparedpersonId");

                    b.ToTable("CarPerson");
                });

            modelBuilder.Entity("MAS.Models.Car", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("BodyType")
                        .HasColumnType("integer");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("dailyRate")
                        .HasColumnType("double precision");

                    b.Property<double>("deposit")
                        .HasColumnType("double precision");

                    b.Property<bool?>("drive4x4")
                        .HasColumnType("boolean");

                    b.Property<double>("mileage")
                        .HasColumnType("double precision");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("numberOfPassangers")
                        .HasColumnType("integer");

                    b.Property<bool?>("offRoad")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("productionYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("roofType")
                        .HasColumnType("integer");

                    b.Property<double?>("timeToGoundred")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("Cars");

                    b.HasDiscriminator<string>("CarType").HasValue("Car");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MAS.Models.Contract", b =>
                {
                    b.Property<int>("rentalId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("contractDate")
                        .HasColumnType("date");

                    b.Property<bool>("contractNumber")
                        .HasColumnType("boolean");

                    b.Property<double>("deposit")
                        .HasColumnType("double precision");

                    b.HasKey("rentalId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("MAS.Models.Person", b =>
                {
                    b.Property<int>("personId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("personId"));

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("drivingLicense")
                        .HasColumnType("boolean");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("hourlyRate")
                        .HasColumnType("double precision");

                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("idNumber")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("personTypes")
                        .HasColumnType("integer");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("registrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("personId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            personId = 1,
                            dateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            drivingLicense = true,
                            email = "jan.kowalski@example.com",
                            id = "PERSON/2025/1",
                            idNumber = "ABC123",
                            name = "Jan",
                            personTypes = 2,
                            phoneNumber = "123456789",
                            registrationDate = new DateTime(2025, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            surname = "Kowalski"
                        },
                        new
                        {
                            personId = 2,
                            dateOfBirth = new DateTime(1985, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            drivingLicense = true,
                            email = "ewa.nowak@example.com",
                            hourlyRate = 40.0,
                            name = "Ewa",
                            personTypes = 1,
                            phoneNumber = "987654321",
                            surname = "Nowak"
                        });
                });

            modelBuilder.Entity("MAS.Models.Rental", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("contractId")
                        .HasColumnType("integer");

                    b.Property<int>("handledByEmployeepersonId")
                        .HasColumnType("integer");

                    b.Property<bool>("isPrepared")
                        .HasColumnType("boolean");

                    b.Property<double?>("kilometersDriven")
                        .HasColumnType("double precision");

                    b.Property<double?>("penalty")
                        .HasColumnType("double precision");

                    b.Property<int>("preparedByEmployeepersonId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("rentalDate")
                        .HasColumnType("date");

                    b.Property<double>("rentalStartMileage")
                        .HasColumnType("double precision");

                    b.Property<int>("rentalStatus")
                        .HasColumnType("integer");

                    b.Property<int>("reservationId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("returnDate")
                        .HasColumnType("date");

                    b.Property<double?>("totalCost")
                        .HasColumnType("double precision");

                    b.Property<string>("vehicleConditionAfterReturn")
                        .HasColumnType("text");

                    b.Property<string>("vehicleConditionAtStart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("contractId");

                    b.HasIndex("handledByEmployeepersonId");

                    b.HasIndex("preparedByEmployeepersonId");

                    b.HasIndex("reservationId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("MAS.Models.Reservation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("dateOfReservation")
                        .HasColumnType("date");

                    b.Property<bool>("deposit")
                        .HasColumnType("boolean");

                    b.Property<int>("numberOfDays")
                        .HasColumnType("integer");

                    b.Property<int>("personId")
                        .HasColumnType("integer");

                    b.Property<string>("reason")
                        .HasColumnType("text");

                    b.Property<int?>("rentalId")
                        .HasColumnType("integer");

                    b.Property<int>("reservationStatus")
                        .HasColumnType("integer");

                    b.Property<int>("satisfactionSurveyId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("carId");

                    b.HasIndex("personId");

                    b.HasIndex("rentalId");

                    b.HasIndex("satisfactionSurveyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MAS.Models.SatisfactionSurvey", b =>
                {
                    b.Property<int>("reservationId")
                        .HasColumnType("integer");

                    b.Property<int>("customerpersonId")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("rating")
                        .HasColumnType("integer");

                    b.HasKey("reservationId");

                    b.HasIndex("customerpersonId");

                    b.ToTable("SatisfactionSurveys");
                });

            modelBuilder.Entity("MAS.Models.Electric", b =>
                {
                    b.HasBaseType("MAS.Models.Car");

                    b.Property<double>("range")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("Electric");

                    b.HasData(
                        new
                        {
                            id = 2,
                            BodyType = 8,
                            brand = "Tesla",
                            condition = "Excellent",
                            dailyRate = 300.0,
                            deposit = 1500.0,
                            mileage = 15000.0,
                            model = "Model 3",
                            numberOfPassangers = 5,
                            productionYear = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            roofType = 0,
                            timeToGoundred = 3.5,
                            range = 0.0
                        });
                });

            modelBuilder.Entity("MAS.Models.Hybrid", b =>
                {
                    b.HasBaseType("MAS.Models.Car");

                    b.HasDiscriminator().HasValue("Hybrid");

                    b.HasData(
                        new
                        {
                            id = 1,
                            BodyType = 2,
                            brand = "Toyota",
                            condition = "Good",
                            dailyRate = 200.0,
                            deposit = 1000.0,
                            drive4x4 = true,
                            mileage = 35000.0,
                            model = "RAV4",
                            numberOfPassangers = 5,
                            offRoad = true,
                            productionYear = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            roofType = 0
                        });
                });

            modelBuilder.Entity("MAS.Models.InternalCombusion", b =>
                {
                    b.HasBaseType("MAS.Models.Car");

                    b.Property<double>("fuelConsumption")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("InternalCombusion");

                    b.HasData(
                        new
                        {
                            id = 3,
                            BodyType = 1,
                            brand = "Ford",
                            condition = "Used",
                            dailyRate = 180.0,
                            deposit = 800.0,
                            mileage = 120000.0,
                            model = "Transit",
                            numberOfPassangers = 9,
                            productionYear = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            roofType = 0,
                            fuelConsumption = 0.0
                        });
                });

            modelBuilder.Entity("CarPerson", b =>
                {
                    b.HasOne("MAS.Models.Car", null)
                        .WithMany()
                        .HasForeignKey("preparationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("preparedpersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAS.Models.Contract", b =>
                {
                    b.HasOne("MAS.Models.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("rentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("MAS.Models.Rental", b =>
                {
                    b.HasOne("MAS.Models.Contract", "contract")
                        .WithMany()
                        .HasForeignKey("contractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Person", "handledByEmployee")
                        .WithMany()
                        .HasForeignKey("handledByEmployeepersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Person", "preparedByEmployee")
                        .WithMany()
                        .HasForeignKey("preparedByEmployeepersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("reservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("contract");

                    b.Navigation("handledByEmployee");

                    b.Navigation("preparedByEmployee");
                });

            modelBuilder.Entity("MAS.Models.Reservation", b =>
                {
                    b.HasOne("MAS.Models.Car", "car")
                        .WithMany("reservations")
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Person", "customer")
                        .WithMany("reservations")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("rentalId");

                    b.HasOne("MAS.Models.SatisfactionSurvey", "satisfactionSurvey")
                        .WithMany()
                        .HasForeignKey("satisfactionSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");

                    b.Navigation("car");

                    b.Navigation("customer");

                    b.Navigation("satisfactionSurvey");
                });

            modelBuilder.Entity("MAS.Models.SatisfactionSurvey", b =>
                {
                    b.HasOne("MAS.Models.Person", "customer")
                        .WithMany()
                        .HasForeignKey("customerpersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAS.Models.Reservation", "reservation")
                        .WithMany()
                        .HasForeignKey("reservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("reservation");
                });

            modelBuilder.Entity("MAS.Models.Car", b =>
                {
                    b.Navigation("reservations");
                });

            modelBuilder.Entity("MAS.Models.Person", b =>
                {
                    b.Navigation("reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
